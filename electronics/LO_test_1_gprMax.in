#num_threads: 14

//seconds

#material: 1     6e7     1 0 copper
//#material: 4.5   0.0001  1 0 substrate
#material: 10.3   0.0001  1 0 substrate

//rel permittivity, conductivity (S/m), rel. permeability, magnetic loss (Ohms/m)

---------------------------------------------------
#python:
from gprMax.input_cmd_funcs import *
import matplotlib.image as mpimage
import numpy as np
import os 

time = 2e-9
print("#time_window: {}".format(time))


domain_x = 0.02
domain_y = 0.02
domain_z = 0.01

N = 50 +20
#PML boundaries are 10 cells on each side of the domain

domain(domain_x, domain_y, domain_z)

cell_x = domain_x/N
cell_y = domain_y/N
cell_z = domain_z/N

dx_dy_dz(cell_x,cell_y,cell_z)

#copper_thickness = 0.0007
substrate_thickness = 0.0007

#ground plane
cells_from_border = 12
plate(cells_from_border*cell_x, cells_from_border*cell_y, cells_from_border*cell_z, 
                            domain_x-(cells_from_border*cell_x), domain_y-(cells_from_border*cell_y), cells_from_border*cell_z, 'copper')


box(cells_from_border*cell_x, cells_from_border*cell_y, cells_from_border*cell_z, 
                            domain_x-(cells_from_border*cell_x), domain_y-(cells_from_border*cell_y), cells_from_border*cell_z+substrate_thickness, 'substrate')


input_filename = "/home/arthurdent/Projects/covidinator/electronics/local_oscillator_test/local_oscillator_test-F.Cu.svg"
dpi = 0.0254 / cell_x 
os.system("inkscape -z --export-dpi {} {} -e from_kicad.png".format(int(dpi),input_filename))


#there's a module for importing pngs, but it doesn't easily support plate or other objects.
img=mpimage.imread('from_kicad.png')

import_pos_x = cells_from_border*cell_x;
import_pos_y = cells_from_border*cell_y;
import_pos_z = cells_from_border*cell_z+substrate_thickness;

for x in range(0, img.shape[0]-1):
    for y in range(0, img.shape[1]-1):
        if(np.sum(img[x,y])): 
            position_x = import_pos_x+(x*cell_x)
            position_y = import_pos_y+(y*cell_y)
            #plate(position_x, position_y, import_pos_z, \
            #            position_x+cell_x, position_y+cell_y, import_pos_z, 'copper')
            box(position_x, position_y, import_pos_z, \
                                    position_x+cell_x, position_y+cell_y, import_pos_z+cell_z, 'copper')
            

print("#voltage_source: z 0.0075 0.0065 {} 1 waveform_1".format(import_pos_z))
#polarization, x,y,z, resistance, waveform          

print("#rx: 0.0075 0.0065 {} rx_0 Ez".format(import_pos_z))

print("#rx: 0.0075 0.00875 {} rx_1 Ez".format(import_pos_z))


geometry_view(0,0,0,domain_x,domain_y,domain_z,cell_x,cell_y,cell_z,'geometry') #creates .vti file, no edges
geometry_view(0,0,0,domain_x,domain_y,domain_z,cell_x,cell_y,cell_z,'geometry',type="f") # creates .vtp file, no sources

for i in range(1, 10):
    print('#snapshot: {} {} {} {} {} {} {} {} {} {} snapshot{}'.format(0,0,0,domain_x,domain_y,domain_z,cell_x,cell_y,cell_z,time/31.0,i))

os.system("rm -r LO_test_1_gprMax_snaps/*")

#end_python:
---------------------------------------------------


#excitation_file: excitation.txt linear extrapolate
/#waveform: contsine 1 8e9 waveform_1
/#gaussian 1 


//run with:

//
//python -m gprMax LO_test_1_gprMax.in
//requires inkscape
//filters->alphabetical->threshold-ing the .vtp at <2 in paraview makes for a cleaner view
//
//then python -m tools.plot_Ascan LO_test_1_gprMax.out --outputs Ez
